<?xml version="1.0"?>
<ruleset name="Coding standard for harvest-api-php-client">

	<!-- Check all PHP files in directory tree by default. -->
	<arg name="extensions" value="php"/>

	<file>.</file>

	<!-- Show progress and sniff codes in all reports -->
	<arg value="ps"/>

	<!-- Check up to 20 files simultaneously. -->
	<arg name="parallel" value="20"/>

	<!-- Whenever possible, cache the scan results and re-use those for unchanged files on the next scan. -->
	<arg name="cache"/>

	<arg name="tab-width" value="4"/>

	<rule ref="PSR2">
		<exclude name="Generic.WhiteSpace.DisallowTabIndent"/>

		<exclude name="PSR2.Methods.FunctionCallSignature"/>
		<exclude name="PSR2.ControlStructures.ControlStructureSpacing"/>
		<exclude name="Squiz.ControlStructures.ForEachLoopDeclaration"/>

		<!-- Allow opening and closing braces for functions and classes to be on the same line -->
		<exclude name="Squiz.Functions.MultiLineFunctionDeclaration.BraceOnSameLine"/>
		<exclude name="PSR2.Classes.ClassDeclaration.OpenBraceNewLine"/>
		<exclude name="Squiz.WhiteSpace.ScopeClosingBrace"/>
	</rule>

	<!-- Tabs, no spaces. -->
	<rule ref="Generic.WhiteSpace.DisallowSpaceIndent"/>
	<rule ref="Generic.WhiteSpace.ScopeIndent">
		<properties>
			<property name="indent" value="4"/>
			<property name="tabIndent" value="true"/>
		</properties>
	</rule>

	<!-- Class/function opening braces should be on the same line as the statement. -->
	<rule ref="Generic.Classes.OpeningBraceSameLine"/>
	<rule ref="Generic.Functions.OpeningFunctionBraceKernighanRitchie">
		<properties>
			<property name="checkClosures" value="true"/>
		</properties>
	</rule>

	<!-- Spacing for function calls. -->
	<rule ref="Squiz.Functions.FunctionDeclarationArgumentSpacing">
		<properties>
			<property name="equalsSpacing" value="1"/>
			<property name="requiredSpacesAfterOpen" value="1"/>
			<property name="requiredSpacesBeforeClose" value="1"/>
		</properties>
	</rule>
	<rule ref="Squiz.Functions.FunctionDeclarationArgumentSpacing.SpacingBeforeClose">
		<severity>0</severity>
	</rule>

	<rule ref="PEAR.Functions.FunctionCallSignature">
		<properties>
			<property name="requiredSpacesAfterOpen" value="1"/>
			<property name="requiredSpacesBeforeClose" value="1"/>
		</properties>
	</rule>
	<rule ref="PEAR.Functions.FunctionCallSignature.ContentAfterOpenBracket">
		<severity phpcs-only="true">0</severity>
	</rule>
	<rule ref="PEAR.Functions.FunctionCallSignature.CloseBracketLine">
		<severity phpcs-only="true">0</severity>
	</rule>

	<rule ref="Generic.Functions.FunctionCallArgumentSpacing"/>

	<!-- Increase line length a bit. -->
	<rule ref="Generic.Files.LineLength">
		<properties>
			<property name="lineLimit" value="200"/>
			<property name="absoluteLineLimit" value="0"/>
		</properties>
	</rule>

	<!-- Disallows grouped use declarations. -->
	<rule ref="SlevomatCodingStandard.Namespaces.DisallowGroupUse"/>
	<!-- Disallows leading backslash in use statement. -->
	<rule ref="SlevomatCodingStandard.Namespaces.UseDoesNotStartWithBackslash"/>
	<!-- Enforces fully qualified names of classes and interfaces in annotations. -->
	<rule ref="SlevomatCodingStandard.Namespaces.FullyQualifiedClassNameInAnnotation"/>
	<!-- Checks whether uses at the top of a file are alphabetically sorted. -->
	<rule ref="SlevomatCodingStandard.Namespaces.AlphabeticallySortedUses"/>
	<!-- Enforces one space after namespace, disallows content between namespace name and semicolon and disallows use of bracketed syntax. -->
	<rule ref="SlevomatCodingStandard.Namespaces.NamespaceDeclaration"/>
	<!-- Prohibits multiple uses separated by commas. -->
	<rule ref="SlevomatCodingStandard.Namespaces.MultipleUsesPerLine"/>
	<!-- Enforces one blank line before and after namespace. -->
	<rule ref="SlevomatCodingStandard.Namespaces.NamespaceSpacing">
		<properties>
			<property name="linesCountBeforeNamespace" value="1"/>
			<property name="linesCountAfterNamespace" value="1"/>
		</properties>
	</rule>
	<!-- Enforces one blank before first use, after last use and none between two different types of use. -->
	<rule ref="SlevomatCodingStandard.Namespaces.UseSpacing">
		<properties>
			<property name="linesCountBeforeFirstUse" value="1"/>
			<property name="linesCountBetweenUseTypes" value="0"/>
			<property name="linesCountAfterLastUse" value="1"/>
		</properties>
	</rule>
	<!-- Prohibits uses from the same namespace. -->
	<rule ref="SlevomatCodingStandard.Namespaces.UseFromSameNamespace"/>
	<!-- All references to types named Exception or ending with Exception must be referenced via a fully qualified name. -->
	<rule ref="SlevomatCodingStandard.Namespaces.FullyQualifiedExceptions"/>
	<!-- Looks for unused imports from other namespaces. -->
	<rule ref="SlevomatCodingStandard.Namespaces.UnusedUses"/>
	<!-- Require root namespace for special compiled PHP functions. -->
	<rule ref="SlevomatCodingStandard.Namespaces.FullyQualifiedGlobalFunctions">
		<properties>
			<property name="includeSpecialFunctions" value="true"/>
		</properties>
	</rule>

	<!-- Checks that there's no whitespace between a nullability symbol and a typehint. -->
	<rule ref="SlevomatCodingStandard.TypeHints.ParameterTypeHintSpacing"/>
	<!-- Checks whether the nullablity ? symbol is present before each nullable and optional parameter. -->
	<rule ref="SlevomatCodingStandard.TypeHints.NullableTypeForNullDefaultValue"/>
	<!-- Enforce no space between closing brace and colon of return typehint. -->
	<rule ref="SlevomatCodingStandard.TypeHints.ReturnTypeHintSpacing">
		<properties>
			<property name="spacesCountBeforeColon" value="0"/>
		</properties>
	</rule>
	<!-- Enforces using shorthand scalar typehint variants in phpDocs. -->
	<rule ref="SlevomatCodingStandard.TypeHints.LongTypeHints"/>

	<!-- Class names should be referenced via ::class constant when possible. -->
	<rule ref="SlevomatCodingStandard.Classes.ModernClassNameReference"/>

	<!-- Requires use of null coalesce operator (??) when possible. -->
	<rule ref="SlevomatCodingStandard.ControlStructures.RequireNullCoalesceOperator"/>

	<!-- Reports forbidden annotations. -->
	<rule ref="SlevomatCodingStandard.Commenting.ForbiddenAnnotations">
		<properties>
			<property name="forbiddenAnnotations" type="array">
				<element value="@package"/>
				<element value="@author"/>
				<element value="@created"/>
				<element value="@copyright"/>
				<element value="@license"/>
				<element value="@access"/>
				<element value="@version"/>
			</property>
		</properties>
	</rule>

	<!-- Require specific order of PHPDoc annotations with empty newline between specific groups. -->
	<!-- Currently disabled due to https://github.com/slevomat/coding-standard/issues/995. -->
	<!--<rule ref="SlevomatCodingStandard.Commenting.DocCommentSpacing">
		<properties>
			<property name="linesCountBeforeFirstContent" value="0"/>
			<property name="linesCountAfterLastContent" value="0"/>
			<property name="linesCountBetweenDescriptionAndAnnotations" value="1"/>
			<property name="linesCountBetweenAnnotationsGroups" value="1"/>
			<property name="annotationsGroups" type="array">
				<element value="@internal"/>
				<element value="
					@since,
					@deprecated,
				"/>
				<element value="
					@link,
					@see,
					@uses,
				"/>
				<element value="
					@global,
				"/>
				<element value="
					@throws,
				"/>
				<element value="
					@param,
					@type,
					@return,
				"/>
			</property
		</properties>
	</rule>>-->

	<!-- Directories and third party library exclusions -->
	<exclude-pattern>/node_modules/*</exclude-pattern>
	<exclude-pattern>/vendor/*</exclude-pattern>
</ruleset>
